#region

using System;
using System.Collections;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;
using System.Xml;

#endregion

namespace Microsoft.Xades
{
    /// <summary>
    ///     This class contains timestamp information
    /// </summary>
    public class TimeStamp
    {
        #region Private variables

        private EncapsulatedPKIData encapsulatedTimeStamp;
        private XMLTimeStamp xmlTimeStamp;
        private readonly string prefix;
        private readonly string namespaceUri;

        #endregion

        #region Public properties

        /// <summary>
        ///     The name of the element when serializing
        /// </summary>
        public string TagName { get; set; }

        /// <summary>
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        ///     A collection of hash data infos
        /// </summary>
        public HashDataInfoCollection HashDataInfoCollection { get; set; }

        /// <summary>
        ///     The time-stamp generated by a TSA encoded as an ASN.1 data
        ///     object
        /// </summary>
        public EncapsulatedPKIData EncapsulatedTimeStamp
        {
            get => encapsulatedTimeStamp;
            set
            {
                encapsulatedTimeStamp = value;
                if (encapsulatedTimeStamp != null) xmlTimeStamp = null;
            }
        }

        /// <summary>
        ///     The time-stamp generated by a TSA encoded as a generic XML
        ///     timestamp
        /// </summary>
        public XMLTimeStamp XMLTimeStamp
        {
            get => xmlTimeStamp;
            set
            {
                xmlTimeStamp = value;
                if (xmlTimeStamp != null) encapsulatedTimeStamp = null;
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        ///     Default constructor
        /// </summary>
        public TimeStamp(string prefix, string namespaceUri)
        {
            HashDataInfoCollection = new HashDataInfoCollection();
            encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
            xmlTimeStamp = null;

            this.prefix = prefix;
            this.namespaceUri = namespaceUri;
        }

        /// <summary>
        ///     Constructor with TagName
        /// </summary>
        /// <param name="tagName">Name of the tag when serializing with GetXml</param>
        public TimeStamp(string tagName)
            : this(XadesSignedXml.XmlXadesPrefix, XadesSignedXml.XadesNamespaceUri)
        {
            TagName = tagName;
        }

        /// <summary>
        ///     Constructor with TagName and prefix
        /// </summary>
        /// <param name="tagName"></param>
        /// <param name="prefix"></param>
        /// <param name="namespaceUri"></param>
        public TimeStamp(string tagName, string prefix, string namespaceUri)
            : this(prefix, namespaceUri)
        {
            TagName = tagName;
        }

        #endregion

        #region Public methods

        /// <summary>
        ///     Check to see if something has changed in this instance and needs to be serialized
        /// </summary>
        /// <returns>Flag indicating if a member needs serialization</returns>
        public bool HasChanged()
        {
            var retVal = false;

            if (HashDataInfoCollection.Count > 0) retVal = true;

            if (encapsulatedTimeStamp != null && encapsulatedTimeStamp.HasChanged()) retVal = true;

            if (xmlTimeStamp != null && xmlTimeStamp.HasChanged()) retVal = true;

            return retVal;
        }

        /// <summary>
        ///     Load state from an XML element
        /// </summary>
        /// <param name="xmlElement">XML element containing new state</param>
        public void LoadXml(XmlElement xmlElement)
        {
            XmlNamespaceManager xmlNamespaceManager;
            XmlNodeList xmlNodeList;
            IEnumerator enumerator;
            XmlElement iterationXmlElement;
            HashDataInfo newHashDataInfo;

            if (xmlElement == null) throw new ArgumentNullException("xmlElement");

            if (xmlElement.HasAttribute("Id"))
                Id = xmlElement.GetAttribute("Id");
            else
                Id = "";

            xmlNamespaceManager = new XmlNamespaceManager(xmlElement.OwnerDocument.NameTable);
            xmlNamespaceManager.AddNamespace("xades", XadesSignedXml.XadesNamespaceUri);

            HashDataInfoCollection.Clear();
            xmlNodeList = xmlElement.SelectNodes("xades:HashDataInfo", xmlNamespaceManager);
            enumerator = xmlNodeList.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    iterationXmlElement = enumerator.Current as XmlElement;
                    if (iterationXmlElement != null)
                    {
                        newHashDataInfo = new HashDataInfo();
                        newHashDataInfo.LoadXml(iterationXmlElement);
                        HashDataInfoCollection.Add(newHashDataInfo);
                    }
                }
            }
            finally
            {
                var disposable = enumerator as IDisposable;
                disposable?.Dispose();
            }

            xmlNodeList = xmlElement.SelectNodes("xades:EncapsulatedTimeStamp", xmlNamespaceManager);
            if (xmlNodeList != null && xmlNodeList.Count != 0)
            {
                encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
                encapsulatedTimeStamp.LoadXml((XmlElement) xmlNodeList.Item(0));
                xmlTimeStamp = null;
            }
            else
            {
                xmlNodeList = xmlElement.SelectNodes("xades:XMLTimeStamp", xmlNamespaceManager);
                if (xmlNodeList.Count != 0)
                {
                    xmlTimeStamp = new XMLTimeStamp();
                    xmlTimeStamp.LoadXml((XmlElement) xmlNodeList.Item(0));
                    encapsulatedTimeStamp = null;
                }
                else
                {
                    throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp missing");
                }
            }
        }

        /// <summary>
        ///     Returns the XML representation of the this object
        /// </summary>
        /// <returns>XML element containing the state of this object</returns>
        public XmlElement GetXml()
        {
            XmlDocument creationXmlDocument;
            XmlElement retVal;

            creationXmlDocument = new XmlDocument();

            retVal = creationXmlDocument.CreateElement(prefix, TagName, namespaceUri);

            retVal.SetAttribute("xmlns:ds", SignedXml.XmlDsigNamespaceUrl);

            retVal.SetAttribute("Id", Id);

            /*  XmlElement canonicalization = creationXmlDocument.CreateElement("CanonicalizationMethod", SignedXml.XmlDsigNamespaceUrl);
              canonicalization.SetAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");

              retVal.AppendChild(canonicalization);*/

            //   XmlDsigC14NTransform xmlDsigC14NTransform = new XmlDsigC14NTransform();


            if (HashDataInfoCollection.Count > 0)
                foreach (HashDataInfo hashDataInfo in HashDataInfoCollection)
                    if (hashDataInfo.HasChanged())
                        retVal.AppendChild(creationXmlDocument.ImportNode(hashDataInfo.GetXml(), true));

            if (encapsulatedTimeStamp != null && encapsulatedTimeStamp.HasChanged())
            {
                retVal.AppendChild(creationXmlDocument.ImportNode(encapsulatedTimeStamp.GetXml(), true));
            }
            else
            {
                if (xmlTimeStamp != null && xmlTimeStamp.HasChanged())
                    retVal.AppendChild(creationXmlDocument.ImportNode(xmlTimeStamp.GetXml(), true));
                else
                    throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp element missing");
            }

            return retVal;
        }

        #endregion
    }
}